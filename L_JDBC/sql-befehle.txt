-- SQL Befehle für MySQL/MariaDB
-- SQL Kurs im WIFI: https://www.wifiwien.at/kurs/28145x-sql-basis-abfragen-und-aendern-von-daten

/*********************************************************/
/*******************  Initialisierung  *******************/
/*********************************************************/

-- 1. Datenbank erstellen (mit UTF8-Kodierung, ohne Unterscheidung Groß/Kleinschreibung)
create database CourseDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- 2. zur DB wechseln
use CourseDB;

-- 3. Tabellen erstellen

create table Languages (
	id    int   NOT NULL  AUTO_INCREMENT KEY, -- Primärschlüssel der Tabelle, mit automatischem Hochzählen der Id
	name  varchar(150)  NOT NULL, -- Zeichenfolge, max. 150 Zeichen lang
	code  varchar(10)   NOT NULL -- Zeichenfolge, max. 10 Zeichen lang
);


create table Students (
	id    int   NOT NULL  AUTO_INCREMENT KEY,
	name  varchar(150)  NOT NULL,
	areaCode  int   NOT NULL,
	city  varchar(150)  NOT NULL,
	birthDate date    NOT NULL,
	gender  varchar(50) NOT NULL,
	xml   bit    NOT NULL,
	html  bit    NOT NULL,
	fxml  bit   NOT NULL,
	comment varchar(1000) NULL,
	languageId  int  NOT NULL,
	FOREIGN KEY (languageId)
		REFERENCES languages(id)

);

/*********************************************************/
/*******************  DB Löschen	**********************/
/*********************************************************/

/*
--Datenbank löschen
drop database CourseDB;

-- Tabelle löschen
drop table Students;
drop table Languages;
*/ 



/*********************************************************/
/*******************  	Abfragen	**********************/
/*********************************************************/
select * from Languages;
select * from Students;
/* Vergleichsoperatoren in SQL:
 (gleich ungleich kleiner größer kleinergleich grlößergleich)
      =   <>          <      >        <=          >=
*/
select * from Students where id = 2;
select id, name from languages where code = 'DE';

-- like ist für Mustervergleich
select * from Students where name like 'k%';
select id, name, code from languages where code like '%e%';

-- mit Wert (not null) bzw. ohne Wert (null)
select * from Students where comment is null;
select * from Students where comment is not null;

-- Sortierung
select * from Students order by name;
select * from Languages order by code desc;

/*********************************************************/
/*******************  Updates		**********************/
/*********************************************************/
insert into Languages(name, code) values ('Deutsch', 'de');
insert into Languages(name, code) values ('English', 'en');
insert into Languages(name, code) values ('Italiano', 'it');


insert into Students (name, areaCode, city, birthDate , gender, xml, html, fxml, comment, languageId)
values ('Karo',  1100, 'Vienna', '1995-06-10', 'FEMALE', 1, 0, 1, 'Very diligent student!', 1);

insert into Students (name, areaCode, city, birthDate , gender, xml, html, fxml, comment, languageId)
values ('Michaela',  1140, 'Vienna', '1964-12-28', 'FEMALE', 1, 1, 1, null, 3);


-- führt zu einem Fehler (wegen falscher languageId)
insert into Students (name, areaCode, city, birthDate , gender, xml, html, fxml, comment, languageId)
values ('Michi',  1140, 'Vienna', '1964-12-28', 'FEMALE', 1, 1, 1, null, 33);
-- führt zu einem Fehler (weil areaCode nicht null sein darf)
insert into Students (name, areaCode, city, birthDate , gender, xml, html, fxml, comment, languageId)
values ('Michi P.',  null, 'Vienna', '1964-12-28', 'FEMALE', 1, 1, 1, null, 3);


update Students set city='Wien', areaCode = 1010 where id = 1;

delete from Students where id = 1;
delete from Students where name like 'tom%';


-- alle Tabellen einer Datenbank anzeigen
show tables;

-- alle Spalten einer Tabelle anzeigen
show columns from Students;

-- key-Spalten anzeigen
select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_SCHEMA='CourseDB';






